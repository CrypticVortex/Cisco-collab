
"""
This script can be used to make 
ssh connection to router and import basic config from file.

  
    """
import tkinter as tk
from tkinter import filedialog, messagebox
from cryptography.fernet import Fernet
import paramiko
import socket

class RouterConfigApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title('Router Configuration')
        self.geometry('600x400')  # Set initial size of the window
        self.resizable(True, True)  # Allow the window to be resizable
        
        # Generate a key for encryption and create a cipher suite
        self.key = Fernet.generate_key()
        self.cipher_suite = Fernet(self.key)
        
        # Create the form elements
        tk.Label(self, text='Router Hostname/IP:').grid(row=0, column=0)
        self.hostname_entry = tk.Entry(self)
        self.hostname_entry.grid(row=0, column=1)
        
        tk.Label(self, text='Username:').grid(row=1, column=0)
        self.username_entry = tk.Entry(self)
        self.username_entry.grid(row=1, column=1)
        
        tk.Label(self, text='Password:').grid(row=2, column=0)
        self.password_entry = tk.Entry(self, show='*')
        self.password_entry.grid(row=2, column=1)
        
        tk.Label(self, text='Configuration File:').grid(row=3, column=0)
        self.config_file_entry = tk.Entry(self)
        self.config_file_entry.grid(row=3, column=1)
        self.browse_button = tk.Button(self, text='Browse', command=self.browse_file)
        self.browse_button.grid(row=3, column=2)
        
        self.submit_button = tk.Button(self, text='Connect', command=self.connect_to_router)
        self.submit_button.grid(row=4, column=1)
        
        # Label for error messages
        self.error_message_label = tk.Label(self, text='', fg='red')
        self.error_message_label.grid(row=5, columnspan=3)
        
    def browse_file(self):
        file_path = filedialog.askopenfilename()
        self.config_file_entry.delete(0, tk.END)
        self.config_file_entry.insert(0, file_path)
    
    def connect_to_router(self):
        # Display connecting message
        self.error_message_label.config(text='Connecting...', fg='black')
        self.update_idletasks()
        
        hostname = self.hostname_entry.get()
        username = self.username_entry.get()
        password = self.password_entry.get()
        config_file_path = self.config_file_entry.get()
        
        encrypted_password = self.cipher_suite.encrypt(password.encode('utf-8'))
        decrypted_password = self.cipher_suite.decrypt(encrypted_password).decode('utf-8')
        
        try:
            # Attempt to connect to the router
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(hostname, username=username, password=decrypted_password, timeout=10)
            
            # Check if the configuration file exists and is readable
            with open(config_file_path, 'r') as config_file:
                commands = config_file.readlines()
            
            # Execute each command in the configuration file
            for command in commands:
                stdin, stdout, stderr = client.exec_command(command)
                print(stdout.read().decode('utf-8'))
            
            client.close()
            self.error_message_label.config(text='Connected and commands executed successfully!', fg='green')
        except FileNotFoundError:
            self.error_message_label.config(text='Configuration file not found.', fg='red')
        except paramiko.ssh_exception.NoValidConnectionsError:
            self.error_message_label.config(text='Could not connect to the router. Check the hostname/IP.', fg='red')
        except paramiko.ssh_exception.AuthenticationException:
            self.error_message_label.config(text='Authentication failed. Check username/password.', fg='red')
        except socket.timeout:
            self.error_message_label.config(text='Connection timed out.', fg='red')
        except Exception as e:
            self.error_message_label.config(text=f'An unexpected error occurred: {e}', fg='red')

if __name__ == '__main__':
    app = RouterConfigApp()
    app.mainloop()
